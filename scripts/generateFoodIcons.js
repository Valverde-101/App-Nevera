const fs = require('fs');
const path = require('path');

const root = path.join(__dirname, '..');
const iconsDir = path.join(root, 'MiAppNevera', 'assets', 'icons');
const targetFile = path.join(root, 'MiAppNevera', 'src', 'foodIcons.js');

function normalize(name) {
  return name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9]/g, '');
}

const entries = [];

function walk(dir) {
  fs.readdirSync(dir).forEach(entry => {
    const full = path.join(dir, entry);
    const stat = fs.statSync(full);
    if (stat.isDirectory()) {
      walk(full);
    } else {
      const rel = path.relative(path.join(root, 'MiAppNevera', 'src'), full).replace(/\\/g, '/');
      let base = path.basename(entry, path.extname(entry));
      base = base.replace(/_icon.*$/, '').replace(/[-_]/g, ' ');
      const key = normalize(base);
      entries.push({ key, rel });
    }
  });
}

walk(iconsDir);

entries.sort((a, b) => a.key.localeCompare(b.key));

const lines = [];
lines.push('// This file is auto-generated by scripts/generateFoodIcons.js');
lines.push('const foodIcons = {');

const seen = new Set();
for (const { key, rel } of entries) {
  if (!seen.has(key)) {
    lines.push(`  '${key}': require('./${rel}'),`);
    seen.add(key);
  }
}

lines.push('};');
lines.push('');
lines.push('export function normalizeFoodName(name) {');
lines.push("  return name.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(/[^a-z0-9]/g, '');");
lines.push('}');
lines.push('');
lines.push('export function getFoodIcon(name) {');
lines.push('  return foodIcons[normalizeFoodName(name)];');
lines.push('}');
lines.push('');
lines.push('export default foodIcons;');

fs.writeFileSync(targetFile, lines.join('\n'));
